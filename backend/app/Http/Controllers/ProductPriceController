<?php

namespace App\Http\Controllers;

use App\Models\ProductPrice;
use App\Models\Product;
use Illuminate\Http\Request;

class ProductPriceController extends Controller
{
    public function index()
    {
        $productPrices = ProductPrice::withTrashed()->with('product')->get();
        $products = Product::all();

        return view('admin.product-prices.index', compact('productPrices', 'products'));
    }

    public function store(Request $request)
    {
        $request->validate([
            'product_id' => 'required|exists:products,id',
            'min_price' => 'required|numeric|min:0',
            'max_price' => 'required|numeric|gte:min_price',
            'discount_percent' => 'required|numeric|min:0|max:100',
            'final_price' => 'required|numeric|min:0',
            'currency' => 'required|string|max:10',
        ]);

        ProductPrice::create($request->all() + ['status' => 1]);

        return redirect()->route('admin.product-prices.index')->with('success', 'Price added successfully.');
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'product_id' => 'required|exists:products,id',
            'min_price' => 'required|numeric|min:0',
            'max_price' => 'required|numeric|gte:min_price',
            'discount_percent' => 'required|numeric|min:0|max:100',
            'final_price' => 'required|numeric|min:0',
            'currency' => 'required|string|max:10',
        ]);

        $price = ProductPrice::findOrFail($id);
        $price->update($request->all());

        return redirect()->route('admin.product-prices.index')->with('success', 'Price updated successfully.');
    }

    public function edit($id)
    {
        $price = ProductPrice::with('product')->findOrFail($id);

        return response()->json([
            'id' => $price->id,
            'product_id' => $price->product_id,
            'min_price' => $price->min_price,
            'max_price' => $price->max_price,
            'discount_percent' => $price->discount_percent,
            'final_price' => $price->final_price,
            'currency' => $price->currency,
            'product_name' => $price->product->name ?? '',
        ]);
    }

    public function destroy($id)
    {
        $price = ProductPrice::findOrFail($id);
        $price->delete();

        return redirect()->back()->with('success', 'Product price soft deleted successfully.');
    }

    public function toggleStatus(Request $request)
    {
        $price = ProductPrice::findOrFail($request->id);

        // Prevent activation if product is inactive or deleted
        if ($request->status && (!$price->product || !$price->product->status || $price->product->deleted_at)) {
            return response()->json([
                'success' => false, 
                'message' => 'Cannot activate price of inactive/deleted product.'
            ]);
        }

        // Update the price status
        $price->status = $request->status;
        $price->save();

        return response()->json([
            'success' => true,
            'message' => 'Price status updated successfully'
        ]);
    }

    /**
     * Sync all product prices status with their associated product status
     * This method can be called manually or automatically when products are updated
     */
    public function syncAllPricesStatus()
    {
        try {
            $updatedCount = 0;
            $productPrices = ProductPrice::with('product')->get();

            foreach ($productPrices as $price) {
                if ($price->product) {
                    $newStatus = $price->product->status && !$price->product->deleted_at ? 1 : 0;
                    
                    if ($price->status !== $newStatus) {
                        $price->status = $newStatus;
                        $price->save();
                        $updatedCount++;
                    }
                } else {
                    // If product doesn't exist, deactivate the price
                    if ($price->status !== 0) {
                        $price->status = 0;
                        $price->save();
                        $updatedCount++;
                    }
                }
            }

            return response()->json([
                'success' => true,
                'message' => "Successfully synchronized {$updatedCount} product prices",
                'updated_count' => $updatedCount
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to synchronize product prices: ' . $e->getMessage()
            ], 500);
        }
    }
} 